[tool.poetry]
name = "ciarc"
version = "0.0.0"
description = "Ciarc"
authors = ["Riftonauts"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/Lolsayna/CIARC"
repository = "https://github.com/Lolsayna/CIARC"
documentation = "https://lolsayna.github.io/CIARC/"
classifiers = [
    "Development Status :: 4 - Beta",
]

packages = [
    { include = "melvonaut", from = "src" },
    { include = "rift_console", from = "src" },
    { include = "shared", from = "src" }
]

[tool.poetry.urls]
Changelog = "https://github.com/Lolsayna/CIARC/-/blob/main/CHANGELOG"

[tool.poetry.dependencies]
python = "^3.12"
click = ">=8.0.1"
requests = "^2.32.3"
types-requests = "^2.32.0.20241016"
loguru = "^0.7.2"
aiodebug = "^2.3.0"
pillow = "^11.0.0"
psutil = "^6.1.0"
pydantic = "^2.9.2"
aiofile = "^3.9.0"
apprise = "^1.9.2"
python-dotenv = "^1.0.1"

[tool.poetry.group.melvonaut]
optional = true

[tool.poetry.group.melvonaut.dependencies]
uvloop = "^0.21.0"
aiohttp = "^3.11.2"
pillow = "^11.0.0"
pydantic = "^2.9.2"

[tool.poetry.group.rift_console]
optional = true

[tool.poetry.group.rift_console.dependencies]
flask = "^3.1.0"
gunicorn = "^23.0.0"
uvicorn-worker = "^0.2.0"
quart = "^0.19.9"
quart-flask-patch = "^0.3.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
Pygments = ">=2.10.0"
coverage = {extras = ["toml"], version = ">=6.2"}
darglint = ">=1.8.1"
mypy = ">=0.930"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
pytest = ">=6.2.5"
typeguard = ">=2.13.3"
xdoctest = {extras = ["colors"], version = ">=0.15.10"}
myst-parser = {version = ">=0.16.1"}
nox = "^2024.10.9"
nox-poetry = "^1.0.3"
pytest-cov = "^6.0.0"
pytest-asyncio = "^0.24.0"
ruff = "^0.7.3"
py-spy = "^0.4.0"
mkdocstrings-python = "^1.16.2"
mkdocs-coverage = "^1.1.0"
mkdocs-material = "^9.6.6"
mkdocs = "^1.6.1"
pydocstyle = "^6.3.0"
vulture = "^2.14"

[tool.poetry.scripts]
melvonaut = "melvonaut.__main__:main"
rift-console = "rift_console.__main__:main"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["melvonaut", "rift_console", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 100
omit = ["noxfile.py"]

[tool.isort]
profile = "black"
force_single_line = true
lines_after_imports = 2

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[tool.pytest.ini_options]
pythonpath = "src"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.black]
line-length = 120

[tool.lint]
ignore = ["E501"]
select = [
    "C",
    "C9",
    "C4",
    "E",
    "F",
    "W",
    "D",
    "DAR",
    "G",
    "A",
    "PT",
    "S",
    "B",
    "B9",
    "ANN",
    "SIM",
    "I",
    "N",
    "DOC",
    "FAST",
    "RST",
    "UP"
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
#fixable = ["A", "B", "C", "D", "E", "F", "..."]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py312"

[tool.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
